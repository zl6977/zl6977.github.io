<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2022-12 on ZZZ's Blogs</title><link>https://zl6977.github.io/tags/2022-12/</link><description>Recent content in 2022-12 on ZZZ's Blogs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 04 Dec 2022 11:21:55 +0100</lastBuildDate><atom:link href="https://zl6977.github.io/tags/2022-12/index.xml" rel="self" type="application/rss+xml"/><item><title>Microservice related</title><link>https://zl6977.github.io/obsidian/microservice-related/</link><pubDate>Sun, 04 Dec 2022 11:21:55 +0100</pubDate><guid>https://zl6977.github.io/obsidian/microservice-related/</guid><description>微服务架构是什么？ - 老刘的回答 - 知乎 link: https://www.zhihu.com/question/65502802/answer/802678798 微服务架构 = 80% 的 SOA 服务架构思想 + 100% 的组件化架构思想 + 80% 的领域建模思想
最初的需求 随着业务发展 这一阶段存在很多不合理的地方：
网站和移动端应用有==很多相同业务逻辑的重复代码==。 数据有时候通过数据库共享，有时候通过接口调用传输。接口调用关系杂乱。 单个应用为了给其他应用提供接口，渐渐地越改越大，包含了很多本来就不属于它的逻辑。应用边界模糊，==功能归属混乱==。 管理后台在一开始的设计中保障级别较低。加入数据分析和促销管理相关功能后出现性能瓶颈，影响了其他应用。 数据库表结构被多个应用依赖，==无法重构和优化==。 所有应用都在一个数据库上操作，数据库出现性能瓶颈。特别是数据分析跑起来的时候，数据库性能急剧下降。 开发、测试、部署、维护愈发困难。即使==只改动一个小功能，也需要整个应用一起发布==。有时候发布会不小心带上了一些未经测试的代码，或者修改了一个功能后，另一个意想不到的地方出错了。为了减轻发布可能产生的问题的影响和线上业务停顿的影响，所有应用都要在凌晨三四点执行发布。发布后为了验证应用正常运行，还得盯到第二天白天的用户高峰期…… 团队出现推诿扯皮现象。关于一些==公用的功能应该建设在哪个应用上==的问题常常要争论很久，最后要么干脆各做各的，或者随便放个地方但是都不维护。 是时候做出改变了 这个阶段只是将服务分开了，数据库依然是共用的，所以一些烟囱式系统的缺点仍然存在：
数据库成为性能瓶颈，并且有单点故障的风险。 数据管理趋向混乱。即使一开始有良好的模块化设计，随着时间推移，==总会有一个服务直接从数据库取另一个服务的数据的现象==。 ==数据库表结构可能被多个服务依赖==，牵一发而动全身，很难调整。 数据库也拆开 如果一直保持共用数据库的模式，则整个架构会越来越僵化，失去了微服务架构的意义。因此小明和小红一鼓作气，把数据库也拆分了。==所有持久化层相互隔离，由各个服务自己负责==。另外，为了提高系统的实时性，加入了消息队列机制。架构如下： 没有银弹 微服务架构虽然解决了旧问题，也引入了新的问题：
微服务架构整个应用分散成多个服务，定位故障点非常困难。 稳定性下降。服务数量变多导致其中一个服务出现故障的概率增大，并且一个服务故障可能导致整个系统挂掉。事实上，在大访问量的生产场景下，故障总是会出现的。 服务数量非常多，部署、管理的工作量很大。 开发方面：如何保证各个服务在持续开发的情况下仍然保持协同合作。 测试方面：服务拆分后，几乎所有功能都会涉及多个服务。原本单个程序的测试变为服务间调用的测试。测试变得更加复杂。 创始人的博客Martinfowler.com https://martinfowler.com/articles/microservices.html
A definition of this new architectural term The term &amp;ldquo;Microservice Architecture&amp;rdquo; has sprung up over the last few years to describe ==a particular way of designing software applications== as ==suites of independently deployable services==.</description></item></channel></rss>
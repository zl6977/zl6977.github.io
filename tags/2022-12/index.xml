<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2022-12 on ZZZ's Blogs</title><link>https://zl6977.github.io/tags/2022-12/</link><description>Recent content in 2022-12 on ZZZ's Blogs</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 26 Feb 2023 17:35:33 +0100</lastBuildDate><atom:link href="https://zl6977.github.io/tags/2022-12/index.xml" rel="self" type="application/rss+xml"/><item><title>Microservice related</title><link>https://zl6977.github.io/obsidian/microservice-related/</link><pubDate>Sun, 04 Dec 2022 11:21:55 +0100</pubDate><guid>https://zl6977.github.io/obsidian/microservice-related/</guid><description>&lt;h2 id="微服务架构是什么---老刘的回答---知乎">微服务架构是什么？ - 老刘的回答 - 知乎&lt;/h2>
&lt;p>link: &lt;a href="https://www.zhihu.com/question/65502802/answer/802678798">https://www.zhihu.com/question/65502802/answer/802678798&lt;/a>
&lt;strong>微服务架构 = 80% 的 SOA 服务架构思想 + 100% 的&lt;a href="https://www.zhihu.com/search?q=%E7%BB%84%E4%BB%B6%E5%8C%96%E6%9E%B6%E6%9E%84&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1371300276%7D">组件化架构&lt;/a>思想 + 80% 的领域建模思想&lt;/strong>&lt;/p>
&lt;h3 id="最初的需求">最初的需求&lt;/h3>
&lt;p>&lt;img src="https://picx.zhimg.com/80/v2-72023eb73961d33d560cd4419f803103_1440w.webp" alt="最初的需求">&lt;/p>
&lt;h3 id="随着业务发展">随着业务发展&lt;/h3>
&lt;p>&lt;img src="https://picx.zhimg.com/80/v2-1292f5a391142ac8da195787e28291bf_1440w.webp?source=1940ef5c" alt="随着业务发展">
这一阶段存在很多不合理的地方：&lt;/p>
&lt;ul>
&lt;li>网站和移动端应用有==很多相同业务逻辑的重复代码==。&lt;/li>
&lt;li>数据有时候通过数据库共享，有时候通过接口调用传输。接口调用关系杂乱。&lt;/li>
&lt;li>单个应用为了给其他应用提供接口，渐渐地越改越大，包含了很多本来就不属于它的逻辑。应用边界模糊，==功能归属混乱==。&lt;/li>
&lt;li>管理后台在一开始的设计中保障级别较低。加入数据分析和促销管理相关功能后出现性能瓶颈，影响了其他应用。&lt;/li>
&lt;li>&lt;a href="https://www.zhihu.com/search?q=%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A802678798%7D">数据库表结构&lt;/a>被多个应用依赖，==无法重构和优化==。&lt;/li>
&lt;li>所有应用都在一个数据库上操作，数据库出现性能瓶颈。特别是数据分析跑起来的时候，数据库性能急剧下降。&lt;/li>
&lt;li>开发、测试、部署、维护愈发困难。即使==只改动一个小功能，也需要整个应用一起发布==。有时候发布会不小心带上了一些未经测试的代码，或者修改了一个功能后，另一个意想不到的地方出错了。为了减轻发布可能产生的问题的影响和线上业务停顿的影响，所有应用都要在凌晨三四点执行发布。发布后为了验证应用正常运行，还得盯到第二天白天的用户高峰期……&lt;/li>
&lt;li>团队出现推诿扯皮现象。关于一些==公用的功能应该建设在哪个应用上==的问题常常要争论很久，最后要么干脆各做各的，或者随便放个地方但是都不维护。&lt;/li>
&lt;/ul>
&lt;h3 id="是时候做出改变了">是时候做出改变了&lt;/h3>
&lt;p>&lt;img src="https://pic1.zhimg.com/80/v2-0882bc64f3f20939876d3433e51fad72_1440w.webp?source=1940ef5c" alt="">
这个阶段只是将服务分开了，数据库依然是共用的，所以一些烟囱式系统的缺点仍然存在：&lt;/p>
&lt;ol>
&lt;li>数据库成为性能瓶颈，并且有单点故障的风险。&lt;/li>
&lt;li>数据管理趋向混乱。即使一开始有良好的模块化设计，随着时间推移，==总会有一个服务直接从数据库取另一个服务的数据的现象==。&lt;/li>
&lt;li>==数据库表结构可能被多个服务依赖==，牵一发而动全身，很难调整。&lt;/li>
&lt;/ol>
&lt;h3 id="数据库也拆开">数据库也拆开&lt;/h3>
&lt;p>如果一直保持共用数据库的模式，则整个架构会越来越僵化，失去了微服务架构的意义。因此小明和小红一鼓作气，把数据库也拆分了。==所有持久化层相互隔离，由各个服务自己负责==。另外，为了提高系统的实时性，加入了&lt;a href="https://www.zhihu.com/search?q=%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E6%9C%BA%E5%88%B6&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A802678798%7D">消息队列机制&lt;/a>。架构如下：
&lt;img src="https://picx.zhimg.com/80/v2-90388920d31fe35b791c6a92f758db18_1440w.webp?source=1940ef5c" alt="">&lt;/p>
&lt;h3 id="没有银弹">没有银弹&lt;/h3>
&lt;p>微服务架构虽然解决了旧问题，也引入了新的问题：&lt;/p></description></item></channel></rss>